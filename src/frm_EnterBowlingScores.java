
import com.sun.glass.events.KeyEvent;
import java.awt.Toolkit;
import java.io.File;
import java.sql.*;
import java.text.*;
import java.util.Calendar;
import javax.swing.JOptionPane;
import java.awt.Desktop;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author robwo
 */
public class frm_EnterBowlingScores extends javax.swing.JFrame {

    private static int playerId;
    private DBConnect con;

    /**
     * Creates new form frm_EnterBowlingScores
     *
     * @param playerId - the playerId used to get player information from the
     * database tables
     */
    private static boolean isNumeric(String n) {
        try {
            Integer.parseInt(n);
            return true;
        } catch (NumberFormatException nfe) {
            return false;

        }
    }

    public frm_EnterBowlingScores(int playerId) {
        initComponents();
        setIcon();
        txt_enterbowlingscores_Scores.setText("");
        this.playerId = playerId;

        // Connect to database and display user's name
        try {
            // Connect to the database
            con = new DBConnect();
            // SQL query statement
            ResultSet rs = con.getStatement().executeQuery("SELECT * FROM PlayerInfo WHERE"
                    + " [PlayerId] = " + playerId);

            // Display user's id and full name
            while (rs.next()) {
                lbl_Scores_Name.setText(rs.getString(2) + " " + rs.getString(3));
            }
        } catch (Exception e) { // Print error if there is a problem with database
            System.out.println("Error: " + e);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jRadioButton1 = new javax.swing.JRadioButton();
        jPanel3 = new javax.swing.JPanel();
        lbl_Scores_NameGame = new javax.swing.JPanel();
        lbl_Scores_Name = new javax.swing.JLabel();
        lbl_EnterScores_EnterScores = new javax.swing.JLabel();
        txt_enterbowlingscores_Scores = new javax.swing.JTextField();
        btn_Done = new javax.swing.JButton();
        btn_EnterScore = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        DatePicker_Scores = new org.jdesktop.swingx.JXDatePicker();
        lbl_Scores_Type = new javax.swing.JLabel();
        cmb_Scores_Type = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        txt_Scores_Name = new javax.swing.JTextField();
        btn_EnterScores_Clear = new javax.swing.JButton();
        lbl_enterbowlingscores_title = new javax.swing.JLabel();
        menu_Main = new javax.swing.JMenuBar();
        menu_main_File = new javax.swing.JMenu();
        menu_File_Seperator1 = new javax.swing.JPopupMenu.Separator();
        jMenu3 = new javax.swing.JMenu();
        menu_UpdateInfo1 = new javax.swing.JMenuItem();
        menu_Delete1 = new javax.swing.JMenuItem();
        menu_Logout = new javax.swing.JMenuItem();
        menu_Menu_File_Exit = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        menu_Menu_Player_ViewScores = new javax.swing.JMenuItem();
        menu_MainMenu_Player_scorecard = new javax.swing.JMenuItem();
        menu_Tournamants = new javax.swing.JMenuItem();
        menu_Leagues = new javax.swing.JMenuItem();
        menu_UpdateInfo = new javax.swing.JMenuItem();
        menu_main_Help = new javax.swing.JMenu();
        menu_About = new javax.swing.JMenuItem();
        menu_Help_Howto = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        menu_Date = new javax.swing.JMenu();

        jRadioButton1.setText("jRadioButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Scores");
        setBackground(new java.awt.Color(0, 41, 60));
        setResizable(false);

        jPanel3.setBackground(new java.awt.Color(0, 41, 60));

        lbl_Scores_NameGame.setBackground(new java.awt.Color(0, 41, 60));
        lbl_Scores_NameGame.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(242, 133, 0), 2));

        lbl_Scores_Name.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lbl_Scores_Name.setForeground(new java.awt.Color(241, 243, 206));
        lbl_Scores_Name.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_Scores_Name.setText("lbl_Scores_Name");

        lbl_EnterScores_EnterScores.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lbl_EnterScores_EnterScores.setForeground(new java.awt.Color(241, 243, 206));
        lbl_EnterScores_EnterScores.setText("Enter Scores");

        txt_enterbowlingscores_Scores.setBackground(new java.awt.Color(241, 243, 206));
        txt_enterbowlingscores_Scores.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        txt_enterbowlingscores_Scores.setText("Scores");
        txt_enterbowlingscores_Scores.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_enterbowlingscores_ScoresKeyPressed(evt);
            }
        });

        btn_Done.setBackground(new java.awt.Color(246, 42, 0));
        btn_Done.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btn_Done.setForeground(new java.awt.Color(241, 243, 206));
        btn_Done.setText("Done");
        btn_Done.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_DoneActionPerformed(evt);
            }
        });

        btn_EnterScore.setBackground(new java.awt.Color(246, 42, 0));
        btn_EnterScore.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btn_EnterScore.setForeground(new java.awt.Color(241, 243, 206));
        btn_EnterScore.setText("Enter Score");
        btn_EnterScore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_EnterScoreActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(241, 243, 206));
        jLabel1.setText("Date");

        DatePicker_Scores.setBackground(new java.awt.Color(241, 243, 206));
        DatePicker_Scores.setForeground(new java.awt.Color(241, 243, 206));

        lbl_Scores_Type.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lbl_Scores_Type.setForeground(new java.awt.Color(241, 243, 206));
        lbl_Scores_Type.setText("Type");

        cmb_Scores_Type.setBackground(new java.awt.Color(241, 243, 206));
        cmb_Scores_Type.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        cmb_Scores_Type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Private", "League", "Tournament" }));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(241, 243, 206));
        jLabel2.setText("Name");

        txt_Scores_Name.setBackground(new java.awt.Color(241, 243, 206));
        txt_Scores_Name.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        btn_EnterScores_Clear.setBackground(new java.awt.Color(246, 42, 0));
        btn_EnterScores_Clear.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btn_EnterScores_Clear.setForeground(new java.awt.Color(241, 243, 206));
        btn_EnterScores_Clear.setText("Clear ");
        btn_EnterScores_Clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_EnterScores_ClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout lbl_Scores_NameGameLayout = new javax.swing.GroupLayout(lbl_Scores_NameGame);
        lbl_Scores_NameGame.setLayout(lbl_Scores_NameGameLayout);
        lbl_Scores_NameGameLayout.setHorizontalGroup(
            lbl_Scores_NameGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lbl_Scores_NameGameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(lbl_Scores_NameGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(lbl_Scores_NameGameLayout.createSequentialGroup()
                        .addGroup(lbl_Scores_NameGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lbl_Scores_Name, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, lbl_Scores_NameGameLayout.createSequentialGroup()
                                .addGap(46, 46, 46)
                                .addGroup(lbl_Scores_NameGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbl_EnterScores_EnterScores, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbl_Scores_Type, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(39, 39, 39)
                                .addGroup(lbl_Scores_NameGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(lbl_Scores_NameGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(DatePicker_Scores, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                                        .addComponent(cmb_Scores_Type, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txt_Scores_Name))
                                    .addComponent(txt_enterbowlingscores_Scores, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(18, 18, 18))
                    .addGroup(lbl_Scores_NameGameLayout.createSequentialGroup()
                        .addComponent(btn_EnterScore, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_EnterScores_Clear, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_Done, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        lbl_Scores_NameGameLayout.setVerticalGroup(
            lbl_Scores_NameGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lbl_Scores_NameGameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbl_Scores_Name, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(lbl_Scores_NameGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DatePicker_Scores, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(11, 11, 11)
                .addGroup(lbl_Scores_NameGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmb_Scores_Type, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_Scores_Type, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(lbl_Scores_NameGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_Scores_Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(lbl_Scores_NameGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_enterbowlingscores_Scores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_EnterScores_EnterScores))
                .addGap(20, 20, 20)
                .addGroup(lbl_Scores_NameGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_EnterScore, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                    .addComponent(btn_EnterScores_Clear, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_Done, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(27, 27, 27))
        );

        lbl_enterbowlingscores_title.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        lbl_enterbowlingscores_title.setForeground(new java.awt.Color(241, 243, 206));
        lbl_enterbowlingscores_title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_enterbowlingscores_title.setText("Scores");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lbl_Scores_NameGame, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbl_enterbowlingscores_title, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbl_enterbowlingscores_title, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_Scores_NameGame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        menu_Main.setBackground(new java.awt.Color(242, 133, 0));
        menu_Main.setForeground(new java.awt.Color(242, 133, 0));

        menu_main_File.setText("File");
        menu_main_File.setToolTipText("File");
        menu_main_File.add(menu_File_Seperator1);

        jMenu3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/settingssmall.png"))); // NOI18N
        jMenu3.setText("Administration");

        menu_UpdateInfo1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        menu_UpdateInfo1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bookmarksmall.png"))); // NOI18N
        menu_UpdateInfo1.setText("Player Infomation");
        menu_UpdateInfo1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_UpdateInfo1ActionPerformed(evt);
            }
        });
        jMenu3.add(menu_UpdateInfo1);

        menu_Delete1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        menu_Delete1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/trash, bin1.png"))); // NOI18N
        menu_Delete1.setText("Delete Account");
        menu_Delete1.setToolTipText("Under Cpntruction");
        menu_Delete1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_Delete1ActionPerformed(evt);
            }
        });
        jMenu3.add(menu_Delete1);

        menu_main_File.add(jMenu3);

        menu_Logout.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        menu_Logout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/warning1.png"))); // NOI18N
        menu_Logout.setText("Logout");
        menu_Logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_LogoutActionPerformed(evt);
            }
        });
        menu_main_File.add(menu_Logout);

        menu_Menu_File_Exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        menu_Menu_File_Exit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/powerlittle.png"))); // NOI18N
        menu_Menu_File_Exit.setText("Exit");
        menu_Menu_File_Exit.setToolTipText("Exit System");
        menu_Menu_File_Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_Menu_File_ExitActionPerformed(evt);
            }
        });
        menu_main_File.add(menu_Menu_File_Exit);

        menu_Main.add(menu_main_File);

        jMenu1.setText("Menu");

        menu_Menu_Player_ViewScores.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        menu_Menu_Player_ViewScores.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/stats2.png"))); // NOI18N
        menu_Menu_Player_ViewScores.setText("View Scores");
        menu_Menu_Player_ViewScores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_Menu_Player_ViewScoresActionPerformed(evt);
            }
        });
        jMenu1.add(menu_Menu_Player_ViewScores);

        menu_MainMenu_Player_scorecard.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        menu_MainMenu_Player_scorecard.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/app draw1.png"))); // NOI18N
        menu_MainMenu_Player_scorecard.setText("ScoreCard");
        menu_MainMenu_Player_scorecard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_MainMenu_Player_scorecardActionPerformed(evt);
            }
        });
        jMenu1.add(menu_MainMenu_Player_scorecard);

        menu_Tournamants.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        menu_Tournamants.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/eye in a sky1.png"))); // NOI18N
        menu_Tournamants.setText("Tournaments");
        menu_Tournamants.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_TournamantsActionPerformed(evt);
            }
        });
        jMenu1.add(menu_Tournamants);

        menu_Leagues.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        menu_Leagues.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/browser1.png"))); // NOI18N
        menu_Leagues.setText("Leagues");
        menu_Leagues.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_LeaguesActionPerformed(evt);
            }
        });
        jMenu1.add(menu_Leagues);

        menu_UpdateInfo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        menu_UpdateInfo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bookmarksmall.png"))); // NOI18N
        menu_UpdateInfo.setText("Player Infomation");
        menu_UpdateInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_UpdateInfoActionPerformed(evt);
            }
        });
        jMenu1.add(menu_UpdateInfo);

        menu_Main.add(jMenu1);

        menu_main_Help.setText("Help");

        menu_About.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        menu_About.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/radarlogoIcon.png"))); // NOI18N
        menu_About.setText("About");
        menu_About.setToolTipText("About");
        menu_About.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_AboutActionPerformed(evt);
            }
        });
        menu_main_Help.add(menu_About);

        menu_Help_Howto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/messages2small.png"))); // NOI18N
        menu_Help_Howto.setText("Help");
        menu_Help_Howto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_Help_HowtoActionPerformed(evt);
            }
        });
        menu_main_Help.add(menu_Help_Howto);

        menu_Main.add(menu_main_Help);
        menu_Main.add(jMenu2);

        menu_Date.setText("Date");
        menu_Main.add(menu_Date);

        setJMenuBar(menu_Main);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This method returns to the Main form when the Done button is clicked.
     *
     * @param evt
     */
    private void btn_DoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_DoneActionPerformed
        // Create and display the Main form
        new frm_Main(playerId).setVisible(true);
        // This form is no longer needed so dispose of it
        this.dispose();
    }//GEN-LAST:event_btn_DoneActionPerformed

    /**
     * This method enters the score entered by the user into the scores table
     * when the Enter Scores button is clicked.
     *
     * @param evt
     */
    private void btn_EnterScoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_EnterScoreActionPerformed
        // Get the score from the textbox
        String scores = txt_enterbowlingscores_Scores.getText();
        int score = -1;
        try {
            score = Integer.parseInt(scores);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "You must enter a valid number.");
        }

        // Get the current date and time
        DateFormat fmt = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSSSSS");
        Calendar currentDate = Calendar.getInstance();
        String date = fmt.format(currentDate.getTime());

        // Get the date from the date picker
        long z = 0;
        try {
            z = DatePicker_Scores.getDate().getTime();
        } catch (NullPointerException ex) {
        }
        // Set the date to the selected date
        if (z != 0) {
            date = fmt.format(z);
        }

        // Get the selected type from the combo box
        String type = cmb_Scores_Type.getItemAt(cmb_Scores_Type.getSelectedIndex());

        // Get the game name
        String name = txt_Scores_Name.getText();

        // Connect to database and enter scores into Scores table
        try {
            // The entered score must be between 0 and 300 (inclusive)
            if (score >= 0 && score <= 300) {
                // Insert information into Scores table
                int a = con.getStatement().executeUpdate("INSERT INTO Games "
                        + "(PlayerId, Gamename, Gametype, GameDate, TotalScore) VALUES ('"
                        + playerId + "', '" + name + "', '" + type + "', '" + date + "', '"
                        + score + "')");

                // INSERTING BOWLER AVERAGES ---------------------------------------
                // Select the scores from the Games table
                ResultSet rs = con.getStatement().executeQuery("SELECT TotalScore"
                        + " FROM Games WHERE PlayerId = '" + playerId + "' "
                        + "AND Gametype = '" + type + "'");

                int count = 0;
                int sum = 0;
                // Add all the scores together
                while (rs.next()) {
                    sum += Integer.parseInt(rs.getString(1));
                    count++;
                }
                // Get the average of all the scores
                int average = sum / count;
                // Update the averages of the BowlerAverages table
                int b = 0;
                switch (type) {
                    case "Private":
                        b = con.getStatement().executeUpdate("UPDATE BowlerAverages "
                                + "SET GamesPlayed='" + count + "', PrivateAverage='"
                                + average + "' WHERE PlayerId = '" + playerId + "'");
                        break;
                    case "League":
                        b = con.getStatement().executeUpdate("UPDATE BowlerAverages "
                                + "SET GamesPlayed='" + count + "', LeagueAverage='"
                                + average + "' WHERE PlayerId = '" + playerId + "'");
                        break;
                    case "Tournament":
                        b = con.getStatement().executeUpdate("UPDATE BowlerAverages "
                                + "SET GamesPlayed='" + count + "', TournamentAverage='"
                                + average + "' WHERE PlayerId = '" + playerId + "'");
                        break;
                }

                // Select the averages from the BowlerAverages table
                ResultSet rs2 = con.getStatement().executeQuery("SELECT PrivateAverage, "
                        + "LeagueAverage, TournamentAverage FROM BowlerAverages "
                        + "WHERE PlayerId = '" + playerId + "'");

                int sumAll = 0;
                int privateAverage = 0;
                int leagueAverage = 0;
                int tournamentAverage = 0;
                // Add all the averages together
                while (rs2.next()) {
                    privateAverage = Integer.parseInt(rs2.getString(1));
                    leagueAverage = Integer.parseInt(rs2.getString(2));
                    tournamentAverage = Integer.parseInt(rs2.getString(3));
                    sumAll += privateAverage;
                    sumAll += leagueAverage;
                    sumAll += tournamentAverage;
                }
                // Get the overall average
                int averageAll = 0;
                // Only add gametype average if there is an average for that game type
                if (privateAverage > 0 && leagueAverage > 0 && tournamentAverage > 0) {
                    averageAll = sumAll / 3;
                } else if (privateAverage > 0 && leagueAverage > 0) {
                    averageAll = sumAll / 2;
                } else if (privateAverage > 0 && tournamentAverage > 0) {
                    averageAll = sumAll / 2;
                } else if (leagueAverage > 0 && tournamentAverage > 0) {
                    averageAll = sumAll / 2;
                } else {
                    averageAll = sumAll;
                }
                // Update the overall average of the BowlerAverages table
                int c = con.getStatement().executeUpdate("UPDATE BowlerAverages "
                        + "SET [Overall Average]='" + averageAll + "' WHERE PlayerId = '"
                        + playerId + "'");
                //------------------------------------------------------------------

                /* If INSERT statement was successful then ask user if they want
                to enter another score */
                if (a == 1 && b == 1) {
                    int again = JOptionPane.showConfirmDialog(null,"Enter another score?", "Successful",JOptionPane.YES_NO_OPTION);

                    // If user selects "no" then return to the Main form
                    if (again == JOptionPane.NO_OPTION) {
                        // Create and display the Main form
                        new frm_Main(playerId).setVisible(true);
                        // Close database connection and dispose of this form
                        con.getConnection().close();
                        this.dispose();
                    } else {
                        // Reset textbox and set focus on it
                        txt_enterbowlingscores_Scores.setText("");
                        txt_Scores_Name.setText("");
//                        DatePicker_Scores.set
                        txt_enterbowlingscores_Scores.requestFocus(true);
                    }
                } else { // If the score entry fails then tell the user and reset text
                    JOptionPane.showMessageDialog(null, "Failed");
                    txt_enterbowlingscores_Scores.setText("");
                    txt_enterbowlingscores_Scores.requestFocus();
                }
            } else {
                JOptionPane.showMessageDialog(null, "You must enter a number "
                        + "between 0 and 300 (inclusive).");
                txt_enterbowlingscores_Scores.setText("");
            }
        } catch (Exception e) { // Print error if there is a problem with database
            System.out.println("Error: " + e);
        }

    }//GEN-LAST:event_btn_EnterScoreActionPerformed

    private void menu_LogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_LogoutActionPerformed
        new frm_LoginPage().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_menu_LogoutActionPerformed

    private void menu_Menu_File_ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_Menu_File_ExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_menu_Menu_File_ExitActionPerformed

    private void menu_Menu_Player_ViewScoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_Menu_Player_ViewScoresActionPerformed
        new frm_DisplayScores(playerId).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_menu_Menu_Player_ViewScoresActionPerformed

    private void menu_MainMenu_Player_scorecardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_MainMenu_Player_scorecardActionPerformed
        new frm_BowlingScoreCard(playerId).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_menu_MainMenu_Player_scorecardActionPerformed

    private void menu_TournamantsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_TournamantsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_menu_TournamantsActionPerformed

    private void menu_LeaguesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_LeaguesActionPerformed
        new frm_Leagues(playerId).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_menu_LeaguesActionPerformed

    private void menu_UpdateInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_UpdateInfoActionPerformed
        new frm_PlayerInfo(playerId).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_menu_UpdateInfoActionPerformed

    private void menu_AboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_AboutActionPerformed
        new frm_About().setVisible(true);
    }//GEN-LAST:event_menu_AboutActionPerformed

    private void menu_Help_HowtoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_Help_HowtoActionPerformed
        // TODO add your handling code here:
        try {
            //            String URL = "Howto/GameTrakker_HowTo.html";
            //            java.awt.Desktop.getDesktop().browse(java.net.URI.create(URL));

            Desktop.getDesktop().open(new File("Howto\\GameTrakker_HowTo.html"));

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }

    }//GEN-LAST:event_menu_Help_HowtoActionPerformed

    private void txt_enterbowlingscores_ScoresKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_enterbowlingscores_ScoresKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            // Get the score from the textbox
            String scores = txt_enterbowlingscores_Scores.getText();
            int score = -1;
            try {
                score = Integer.parseInt(scores);
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "You must enter a valid number.");
            }

            // Get the current date and time
            DateFormat fmt = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSSSSS");
            Calendar currentDate = Calendar.getInstance();
            String date = fmt.format(currentDate.getTime());

            // Get the date from the date picker
            long z = 0;
            try {
                z = DatePicker_Scores.getDate().getTime();
            } catch (NullPointerException ex) {
            }
            // Set the date to the selected date
            if (z != 0) {
                date = fmt.format(z);
            }

            // Get the selected type from the combo box
            String type = cmb_Scores_Type.getItemAt(cmb_Scores_Type.getSelectedIndex());

            // Get the game name
            String name = txt_Scores_Name.getText();

            // Connect to database and enter scores into Scores table
            try {
                // The entered score must be between 0 and 300 (inclusive)
                if (score >= 0 && score <= 300) {
                    // Insert information into Scores table
                    int a = con.getStatement().executeUpdate("INSERT INTO Games "
                            + "(PlayerId, Gamename, Gametype, GameDate, TotalScore) VALUES ('"
                            + playerId + "', '" + name + "', '" + type + "', '" + date + "', '"
                            + score + "')");

                    // INSERTING BOWLER AVERAGES ---------------------------------------
                    // Select the scores from the Games table
                    ResultSet rs = con.getStatement().executeQuery("SELECT TotalScore"
                            + " FROM Games WHERE PlayerId = '" + playerId + "' "
                            + "AND Gametype = '" + type + "'");

                    int count = 0;
                    int sum = 0;
                    // Add all the scores together
                    while (rs.next()) {
                        sum += Integer.parseInt(rs.getString(1));
                        count++;
                    }
                    // Get the average of all the scores
                    int average = sum / count;
                    // Update the averages of the BowlerAverages table
                    int b = 0;
                    switch (type) {
                        case "Private":
                            b = con.getStatement().executeUpdate("UPDATE BowlerAverages "
                                    + "SET GamesPlayed='" + count + "', PrivateAverage='"
                                    + average + "' WHERE PlayerId = '" + playerId + "'");
                            break;
                        case "League":
                            b = con.getStatement().executeUpdate("UPDATE BowlerAverages "
                                    + "SET GamesPlayed='" + count + "', LeagueAverage='"
                                    + average + "' WHERE PlayerId = '" + playerId + "'");
                            break;
                        case "Tournament":
                            b = con.getStatement().executeUpdate("UPDATE BowlerAverages "
                                    + "SET GamesPlayed='" + count + "', TournamentAverage='"
                                    + average + "' WHERE PlayerId = '" + playerId + "'");
                            break;
                    }

                    // Select the averages from the BowlerAverages table
                    ResultSet rs2 = con.getStatement().executeQuery("SELECT PrivateAverage, "
                            + "LeagueAverage, TournamentAverage FROM BowlerAverages "
                            + "WHERE PlayerId = '" + playerId + "'");

                    int sumAll = 0;
                    int privateAverage = 0;
                    int leagueAverage = 0;
                    int tournamentAverage = 0;
                    // Add all the averages together
                    while (rs2.next()) {
                        privateAverage = Integer.parseInt(rs2.getString(1));
                        leagueAverage = Integer.parseInt(rs2.getString(2));
                        tournamentAverage = Integer.parseInt(rs2.getString(3));
                        sumAll += privateAverage;
                        sumAll += leagueAverage;
                        sumAll += tournamentAverage;
                    }
                    // Get the overall average
                    int averageAll = 0;
                    // Only add gametype average if there is an average for that game type
                    if (privateAverage > 0 && leagueAverage > 0 && tournamentAverage > 0) {
                        averageAll = sumAll / 3;
                    } else if (privateAverage > 0 && leagueAverage > 0) {
                        averageAll = sumAll / 2;
                    } else if (privateAverage > 0 && tournamentAverage > 0) {
                        averageAll = sumAll / 2;
                    } else if (leagueAverage > 0 && tournamentAverage > 0) {
                        averageAll = sumAll / 2;
                    } else {
                        averageAll = sumAll;
                    }
                    // Update the overall average of the BowlerAverages table
                    int c = con.getStatement().executeUpdate("UPDATE BowlerAverages "
                            + "SET [Overall Average]='" + averageAll + "' WHERE PlayerId = '"
                            + playerId + "'");
                    //------------------------------------------------------------------

                    /* If INSERT statement was successful then ask user if they want
                    to enter another score */
                    if (a == 1 && b == 1) {
                        int again = JOptionPane.showConfirmDialog(null,"Enter another score?", "Successful",JOptionPane.YES_NO_OPTION);

                        // If user selects "no" then return to the Main form
                        if (again == JOptionPane.NO_OPTION) {
                            // Create and display the Main form
                            new frm_Main(playerId).setVisible(true);
                            // Close database connection and dispose of this form
                            con.getConnection().close();
                            this.dispose();
                        } else {
                            // Reset textbox and set focus on it
                            txt_enterbowlingscores_Scores.setText("");
                            txt_Scores_Name.setText("");
//                        DatePicker_Scores.set
                            txt_enterbowlingscores_Scores.requestFocus(true);
                        }
                    } else { // If the score entry fails then tell the user and reset text
                        JOptionPane.showMessageDialog(null, "Failed");
                        txt_enterbowlingscores_Scores.setText("");
                        txt_enterbowlingscores_Scores.requestFocus();
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "You must enter a number "
                            + "between 0 and 300 (inclusive).");
                    txt_enterbowlingscores_Scores.setText("");
                }
            } catch (Exception e) { // Print error if there is a problem with database
                System.out.println("Error: " + e);
            }
        }
    }//GEN-LAST:event_txt_enterbowlingscores_ScoresKeyPressed

    private void btn_EnterScores_ClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_EnterScores_ClearActionPerformed
        // TODO add your handling code here:
        txt_Scores_Name.setText("");
        txt_enterbowlingscores_Scores.setText("");
        DatePicker_Scores.setDate(null);
    }//GEN-LAST:event_btn_EnterScores_ClearActionPerformed

    private void menu_UpdateInfo1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_UpdateInfo1ActionPerformed
        new frm_PlayerInfo(playerId).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_menu_UpdateInfo1ActionPerformed

    private void menu_Delete1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_Delete1ActionPerformed
        int ask = JOptionPane.showConfirmDialog(null, "Do you want to delete your account?");
        // Ask again to make sure the user really wants to delete their account
        if (ask == JOptionPane.YES_OPTION) {
            int delete = JOptionPane.showConfirmDialog(null, "This will permanently"
                + " delete your account and information!\nAre you sure you"
                + " want to delete your account?");
            // Delete account if user answers "yes"
            if (delete == JOptionPane.YES_OPTION) {
                try {
                    // Database connection
                    DBConnect con = new DBConnect();
                    // Delete user's averages
                    int a = con.getStatement().executeUpdate("DELETE FROM BowlerAverages"
                        + " WHERE PlayerId = '" + playerId + "'");
                    // Delete user's games
                    int b = con.getStatement().executeUpdate("DELETE FROM Games"
                        + " WHERE PlayerId = '" + playerId + "'");
                    // Delete user's info
                    int c = con.getStatement().executeUpdate("DELETE FROM LoginInfo"
                        + " WHERE PlayerId = '" + playerId + "'");
                    // Delete user's login info
                    int d = con.getStatement().executeUpdate("DELETE FROM PlayerInfo"
                        + " WHERE PlayerId = '" + playerId + "'");

                    /* Tell user their account has been successfully deleted
                    and return them to the login page */
                    if (a == 1 && c == 1) {
                        new frm_LoginPage().setVisible(true);
                        this.dispose();
                        JOptionPane.showMessageDialog(null, "Your account has been"
                            + " deleted.");

                    }
                } catch (Exception ex) {
                    System.out.println("ERROR: " + ex);
                }
            }
        }
    }//GEN-LAST:event_menu_Delete1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frm_EnterBowlingScores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frm_EnterBowlingScores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frm_EnterBowlingScores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frm_EnterBowlingScores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frm_EnterBowlingScores(playerId).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jdesktop.swingx.JXDatePicker DatePicker_Scores;
    private javax.swing.JButton btn_Done;
    private javax.swing.JButton btn_EnterScore;
    private javax.swing.JButton btn_EnterScores_Clear;
    private javax.swing.JComboBox<String> cmb_Scores_Type;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JLabel lbl_EnterScores_EnterScores;
    private javax.swing.JLabel lbl_Scores_Name;
    private javax.swing.JPanel lbl_Scores_NameGame;
    private javax.swing.JLabel lbl_Scores_Type;
    private javax.swing.JLabel lbl_enterbowlingscores_title;
    private javax.swing.JMenuItem menu_About;
    private javax.swing.JMenu menu_Date;
    private javax.swing.JMenuItem menu_Delete1;
    private javax.swing.JPopupMenu.Separator menu_File_Seperator1;
    private javax.swing.JMenuItem menu_Help_Howto;
    private javax.swing.JMenuItem menu_Leagues;
    private javax.swing.JMenuItem menu_Logout;
    private javax.swing.JMenuBar menu_Main;
    private javax.swing.JMenuItem menu_MainMenu_Player_scorecard;
    private javax.swing.JMenuItem menu_Menu_File_Exit;
    private javax.swing.JMenuItem menu_Menu_Player_ViewScores;
    private javax.swing.JMenuItem menu_Tournamants;
    private javax.swing.JMenuItem menu_UpdateInfo;
    private javax.swing.JMenuItem menu_UpdateInfo1;
    private javax.swing.JMenu menu_main_File;
    private javax.swing.JMenu menu_main_Help;
    private javax.swing.JTextField txt_Scores_Name;
    private javax.swing.JTextField txt_enterbowlingscores_Scores;
    // End of variables declaration//GEN-END:variables

    private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("radarlogoIcon.png")));
    }
}
