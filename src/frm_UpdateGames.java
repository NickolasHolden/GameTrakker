
import java.io.File;
import javax.swing.JOptionPane;
import java.awt.Desktop;
import java.awt.Toolkit;
import java.sql.ResultSet;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author robwo
 */
public class frm_UpdateGames extends javax.swing.JFrame {

    private static int playerId;
    private static String id;
    private static String name;
    private static String date;
    private static String type;
    private static String score;
    private DBConnect con;
    String[] ug_Type = {"Private", "Tournament", "League"};

    /**
     * Creates new form frm_UpdateGames
     *
     * @param playerId
     */
    public frm_UpdateGames(int playerId, String id, String name, String date, String type, String score) {
        initComponents();
        this.playerId = playerId;
        this.id = id;
        this.name = name;
        this.date = date;
        this.type = type;
        this.score = score;
        jLabel2.setText(playerId + "");
        cmb_UpdateGames_Type.setModel(new javax.swing.DefaultComboBoxModel(ug_Type));
        setIcon();

        // Get the selected date and time
        DateFormat fmt = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSSSSS");
        Date date2 = new Date();
        try {
            date2 = (Date) fmt.parse(date + " 00:00:00.000000");
        } catch (ParseException ex) {
            Logger.getLogger(frm_UpdateGames.class.getName()).log(Level.SEVERE, null, ex);
        }

        // Set the fields to the selected game information
        txt_Name.setText(name);
        DatePicker.setDate(date2);
        cmb_UpdateGames_Type.setSelectedItem(type);
        txt_Score.setText(score);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField2 = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        cmb_UpdateGames_Type = new javax.swing.JComboBox<>();
        txt_Score = new javax.swing.JTextField();
        lbl_UpdateGames_Name = new javax.swing.JLabel();
        lbl_UpdateGames_Date = new javax.swing.JLabel();
        lbl_UpdateGames_Score = new javax.swing.JLabel();
        txt_Name = new javax.swing.JTextField();
        DatePicker = new org.jdesktop.swingx.JXDatePicker();
        lbl_UpdateGames_Type = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btn_UpdateGames_Update = new javax.swing.JButton();
        btn_UpdateGames_Clear = new javax.swing.JButton();
        btn_UpdateGames_Done = new javax.swing.JButton();
        menu_Main = new javax.swing.JMenuBar();
        menu_main_File = new javax.swing.JMenu();
        menu_File_Seperator1 = new javax.swing.JPopupMenu.Separator();
        jMenu3 = new javax.swing.JMenu();
        menu_UpdateInfo = new javax.swing.JMenuItem();
        menu_Delete = new javax.swing.JMenuItem();
        menu_Logout = new javax.swing.JMenuItem();
        menu_Menu_File_Exit = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        menu_Menu_Player_ViewScores = new javax.swing.JMenuItem();
        menu_MainMenu_Player_scorecard = new javax.swing.JMenuItem();
        menu_Menu_Player_EnterScores = new javax.swing.JMenuItem();
        menu_Tournamants = new javax.swing.JMenuItem();
        menu_Leagues = new javax.swing.JMenuItem();
        menu_main_Help = new javax.swing.JMenu();
        menu_About = new javax.swing.JMenuItem();
        menu_Help_Howto = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        menu_Date = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Update Games");

        jTextField2.setText("jTextField1");

        jPanel2.setBackground(new java.awt.Color(0, 41, 60));

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(241, 243, 206));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Update Game");

        jPanel1.setBackground(new java.awt.Color(0, 41, 60));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(242, 133, 0)));

        cmb_UpdateGames_Type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        txt_Score.setBackground(new java.awt.Color(241, 243, 206));

        lbl_UpdateGames_Name.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lbl_UpdateGames_Name.setForeground(new java.awt.Color(241, 243, 206));
        lbl_UpdateGames_Name.setText("Name");

        lbl_UpdateGames_Date.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lbl_UpdateGames_Date.setForeground(new java.awt.Color(241, 243, 206));
        lbl_UpdateGames_Date.setText("Date");

        lbl_UpdateGames_Score.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lbl_UpdateGames_Score.setForeground(new java.awt.Color(241, 243, 206));
        lbl_UpdateGames_Score.setText("Score");

        txt_Name.setBackground(new java.awt.Color(241, 243, 206));

        DatePicker.setName("Private\nTournament\nLeague"); // NOI18N

        lbl_UpdateGames_Type.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lbl_UpdateGames_Type.setForeground(new java.awt.Color(241, 243, 206));
        lbl_UpdateGames_Type.setText("Type");

        jLabel1.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(241, 243, 206));
        jLabel1.setText("PlayerID");

        jLabel2.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(241, 243, 206));
        jLabel2.setText("jLabel2");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lbl_UpdateGames_Name, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbl_UpdateGames_Type, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbl_UpdateGames_Score, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbl_UpdateGames_Date, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE))
                .addGap(95, 95, 95)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(DatePicker, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                    .addComponent(txt_Name)
                    .addComponent(cmb_UpdateGames_Type, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txt_Score)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(78, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_UpdateGames_Name)
                    .addComponent(txt_Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_UpdateGames_Date)
                    .addComponent(DatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_UpdateGames_Type, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmb_UpdateGames_Type))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_UpdateGames_Score)
                    .addComponent(txt_Score, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        btn_UpdateGames_Update.setBackground(new java.awt.Color(246, 42, 0));
        btn_UpdateGames_Update.setForeground(new java.awt.Color(241, 243, 206));
        btn_UpdateGames_Update.setText("Update Game");
        btn_UpdateGames_Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_UpdateGames_UpdateActionPerformed(evt);
            }
        });

        btn_UpdateGames_Clear.setBackground(new java.awt.Color(246, 42, 0));
        btn_UpdateGames_Clear.setForeground(new java.awt.Color(241, 243, 206));
        btn_UpdateGames_Clear.setText("Clear");
        btn_UpdateGames_Clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_UpdateGames_ClearActionPerformed(evt);
            }
        });

        btn_UpdateGames_Done.setBackground(new java.awt.Color(246, 42, 0));
        btn_UpdateGames_Done.setForeground(new java.awt.Color(241, 243, 206));
        btn_UpdateGames_Done.setText("Done");
        btn_UpdateGames_Done.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_UpdateGames_DoneActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btn_UpdateGames_Update, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_UpdateGames_Clear, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_UpdateGames_Done, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(73, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(81, 81, 81)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btn_UpdateGames_Update, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btn_UpdateGames_Clear, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btn_UpdateGames_Done, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        menu_Main.setBackground(new java.awt.Color(242, 133, 0));
        menu_Main.setForeground(new java.awt.Color(242, 133, 0));

        menu_main_File.setText("File");
        menu_main_File.setToolTipText("File");
        menu_main_File.add(menu_File_Seperator1);

        jMenu3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/settingssmall.png"))); // NOI18N
        jMenu3.setText("Administration");

        menu_UpdateInfo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        menu_UpdateInfo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bookmarksmall.png"))); // NOI18N
        menu_UpdateInfo.setText("Player Infomation");
        menu_UpdateInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_UpdateInfoActionPerformed(evt);
            }
        });
        jMenu3.add(menu_UpdateInfo);

        menu_Delete.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        menu_Delete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/trash, bin1.png"))); // NOI18N
        menu_Delete.setText("Delete Account");
        menu_Delete.setToolTipText("Under Cpntruction");
        menu_Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_DeleteActionPerformed(evt);
            }
        });
        jMenu3.add(menu_Delete);

        menu_main_File.add(jMenu3);

        menu_Logout.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        menu_Logout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/warning1.png"))); // NOI18N
        menu_Logout.setText("Logout");
        menu_Logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_LogoutActionPerformed(evt);
            }
        });
        menu_main_File.add(menu_Logout);

        menu_Menu_File_Exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        menu_Menu_File_Exit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/powerlittle.png"))); // NOI18N
        menu_Menu_File_Exit.setText("Exit");
        menu_Menu_File_Exit.setToolTipText("Exit System");
        menu_Menu_File_Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_Menu_File_ExitActionPerformed(evt);
            }
        });
        menu_main_File.add(menu_Menu_File_Exit);

        menu_Main.add(menu_main_File);

        jMenu1.setText("Menu");

        menu_Menu_Player_ViewScores.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        menu_Menu_Player_ViewScores.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/stats2.png"))); // NOI18N
        menu_Menu_Player_ViewScores.setText("View Scores");
        menu_Menu_Player_ViewScores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_Menu_Player_ViewScoresActionPerformed(evt);
            }
        });
        jMenu1.add(menu_Menu_Player_ViewScores);

        menu_MainMenu_Player_scorecard.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        menu_MainMenu_Player_scorecard.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/app draw1.png"))); // NOI18N
        menu_MainMenu_Player_scorecard.setText("ScoreCard");
        menu_MainMenu_Player_scorecard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_MainMenu_Player_scorecardActionPerformed(evt);
            }
        });
        jMenu1.add(menu_MainMenu_Player_scorecard);

        menu_Menu_Player_EnterScores.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        menu_Menu_Player_EnterScores.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/foursquare1.png"))); // NOI18N
        menu_Menu_Player_EnterScores.setText("Enter Scores");
        menu_Menu_Player_EnterScores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_Menu_Player_EnterScoresActionPerformed(evt);
            }
        });
        jMenu1.add(menu_Menu_Player_EnterScores);

        menu_Tournamants.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        menu_Tournamants.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/eye in a sky1.png"))); // NOI18N
        menu_Tournamants.setText("Tournaments");
        menu_Tournamants.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_TournamantsActionPerformed(evt);
            }
        });
        jMenu1.add(menu_Tournamants);

        menu_Leagues.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        menu_Leagues.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/browser1.png"))); // NOI18N
        menu_Leagues.setText("Leagues");
        menu_Leagues.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_LeaguesActionPerformed(evt);
            }
        });
        jMenu1.add(menu_Leagues);

        menu_Main.add(jMenu1);

        menu_main_Help.setText("Help");

        menu_About.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        menu_About.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/radarlogoIcon.png"))); // NOI18N
        menu_About.setText("About");
        menu_About.setToolTipText("About");
        menu_About.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_AboutActionPerformed(evt);
            }
        });
        menu_main_Help.add(menu_About);

        menu_Help_Howto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/messages2small.png"))); // NOI18N
        menu_Help_Howto.setText("Help");
        menu_Help_Howto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_Help_HowtoActionPerformed(evt);
            }
        });
        menu_main_Help.add(menu_Help_Howto);

        menu_Main.add(menu_main_Help);
        menu_Main.add(jMenu2);

        menu_Date.setText("Date");
        menu_Main.add(menu_Date);

        setJMenuBar(menu_Main);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(468, 468, 468))
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void menu_DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_DeleteActionPerformed
        int ask = JOptionPane.showConfirmDialog(null, "Do you want to delete your account?");
        // Ask again to make sure the user really wants to delete their account
        if (ask == JOptionPane.YES_OPTION) {
            int delete = JOptionPane.showConfirmDialog(null, "This will permanently"
                    + " delete your account and information!\nAre you sure you"
                    + " want to delete your account?");
            // Delete account if user answers "yes"
            if (delete == JOptionPane.YES_OPTION) {
                try {
                    // Database connection
                    DBConnect con = new DBConnect();

                    // Delete user's averages
                    int a = con.getStatement().executeUpdate("DELETE FROM BowlerAverages"
                            + " WHERE PlayerId = '" + playerId + "'");
                    // Delete user's games
                    int b = con.getStatement().executeUpdate("DELETE FROM Games"
                            + " WHERE PlayerId = '" + playerId + "'");
                    // Delete user's info
                    int c = con.getStatement().executeUpdate("DELETE FROM LoginInfo"
                            + " WHERE PlayerId = '" + playerId + "'");
                    // Delete user's login info
                    int d = con.getStatement().executeUpdate("DELETE FROM PlayerInfo"
                            + " WHERE PlayerId = '" + playerId + "'");

                    /* Tell user their account has been successfully deleted
                    and return them to the login page */
                    if (c == 1) {
                        new frm_LoginPage().setVisible(true);
                        this.dispose();
                        JOptionPane.showMessageDialog(null, "Your account has been"
                                + " deleted.");

                    }
                } catch (Exception ex) {
                    System.out.println("ERROR: " + ex);
                }
            }
        }
    }//GEN-LAST:event_menu_DeleteActionPerformed

    private void menu_LogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_LogoutActionPerformed
        new frm_LoginPage().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_menu_LogoutActionPerformed

    private void menu_Menu_File_ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_Menu_File_ExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_menu_Menu_File_ExitActionPerformed

    private void menu_Menu_Player_ViewScoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_Menu_Player_ViewScoresActionPerformed
        new frm_DisplayScores(playerId).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_menu_Menu_Player_ViewScoresActionPerformed

    private void menu_MainMenu_Player_scorecardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_MainMenu_Player_scorecardActionPerformed
        new frm_BowlingScoreCard(playerId).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_menu_MainMenu_Player_scorecardActionPerformed

    private void menu_Menu_Player_EnterScoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_Menu_Player_EnterScoresActionPerformed
        new frm_EnterBowlingScores(playerId).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_menu_Menu_Player_EnterScoresActionPerformed

    private void menu_TournamantsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_TournamantsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_menu_TournamantsActionPerformed

    private void menu_LeaguesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_LeaguesActionPerformed
        new frm_Leagues(playerId).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_menu_LeaguesActionPerformed

    private void menu_UpdateInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_UpdateInfoActionPerformed
        new frm_PlayerInfo(playerId).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_menu_UpdateInfoActionPerformed

    private void menu_AboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_AboutActionPerformed
        new frm_About().setVisible(true);
    }//GEN-LAST:event_menu_AboutActionPerformed

    private void menu_Help_HowtoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_Help_HowtoActionPerformed
        // TODO add your handling code here:
        try {
            //            String URL = "Howto/GameTrakker_HowTo.html";
            //            java.awt.Desktop.getDesktop().browse(java.net.URI.create(URL));

            Desktop.getDesktop().open(new File("Howto\\GameTrakker_HowTo.html"));

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_menu_Help_HowtoActionPerformed

    private void btn_UpdateGames_UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_UpdateGames_UpdateActionPerformed
        String updateName = txt_Name.getText();
        String updateType = cmb_UpdateGames_Type.getItemAt(cmb_UpdateGames_Type.getSelectedIndex());
        // Get the score from the textbox
        String scores = txt_Score.getText();
        int updateScore = -1;
        try {
            updateScore = Integer.parseInt(scores);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "You must enter a valid number.");
        }

        // Get the selected date and time
        DateFormat fmt = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSSSSS");
        Date date2 = new Date();
        try {
            date2 = (Date) fmt.parse(date + " 00:00:00.000000");
        } catch (ParseException ex) {
            Logger.getLogger(frm_UpdateGames.class.getName()).log(Level.SEVERE, null, ex);
        }

        Calendar currentDate = Calendar.getInstance();
        String updateDate = fmt.format(currentDate.getTime());

        // Get the date from the date picker
        long z = 0;
        try {
            z = DatePicker.getDate().getTime();
        } catch (NullPointerException ex) {
        }
        // Set the date to the selected date
        if (z != 0) {
            updateDate = fmt.format(z);
        }

        try {
            if (updateScore >= 0 && updateScore <= 300 && updateType != null) {
                con = new DBConnect();
                // Update the selected game
                int a = con.getStatement().executeUpdate("UPDATE Games SET Gamename='"
                        + updateName + "', GameDate='" + updateDate + "', "
                        + "Gametype='" + updateType + "', TotalScore='"
                        + updateScore + "' WHERE PlayerId='" + playerId
                        + "' AND GameId = '" + id + "'");
                if (a == 1) {
                    // INSERTING BOWLER AVERAGES ---------------------------------------
                    // Select the scores from the Games table
                    ResultSet rs = con.getStatement().executeQuery("SELECT TotalScore"
                            + " FROM Games WHERE PlayerId = '" + playerId + "' "
                            + "AND Gametype = '" + updateType + "'");

                    int count = 0;
                    int sum = 0;
                    // Add all the scores together
                    while (rs.next()) {
                        sum += Integer.parseInt(rs.getString(1));
                        count++;
                    }
                    if (count == 0) {
                        count = 1;
                    }

                    // Get the average of all the scores
                    int average = sum / count;
                    // Update the averages of the BowlerAverages table
                    int b = 0;
                    switch (updateType) {
                        case "Private":
                            b = con.getStatement().executeUpdate("UPDATE BowlerAverages "
                                    + "SET GamesPlayed='" + count + "', PrivateAverage='"
                                    + average + "' WHERE PlayerId = '" + playerId + "'");
                            break;
                        case "League":
                            b = con.getStatement().executeUpdate("UPDATE BowlerAverages "
                                    + "SET GamesPlayed='" + count + "', LeagueAverage='"
                                    + average + "' WHERE PlayerId = '" + playerId + "'");
                            break;
                        case "Tournament":
                            b = con.getStatement().executeUpdate("UPDATE BowlerAverages "
                                    + "SET GamesPlayed='" + count + "', TournamentAverage='"
                                    + average + "' WHERE PlayerId = '" + playerId + "'");
                            break;
                    }
                    
                    // INSERTING BOWLER AVERAGES ---------------------------------------
                    // Select the scores from the Games table
                    ResultSet rs3 = con.getStatement().executeQuery("SELECT TotalScore"
                            + " FROM Games WHERE PlayerId = '" + playerId + "' "
                            + "AND Gametype = '" + type + "'");

                    int count2 = 0;
                    int sum2 = 0;
                    // Add all the scores together
                    while (rs3.next()) {
                        sum2 += Integer.parseInt(rs3.getString(1));
                        count2++;
                    }
                    if (count2 == 0) {
                        count2 = 1;
                    }

                    // Get the average of all the scores
                    int average2 = sum2 / count2;
                    // Update the averages of the BowlerAverages table
                    int d = 0;
                    switch (type) {
                        case "Private":
                            d = con.getStatement().executeUpdate("UPDATE BowlerAverages "
                                    + "SET GamesPlayed='" + count2 + "', PrivateAverage='"
                                    + average2 + "' WHERE PlayerId = '" + playerId + "'");
                            break;
                        case "League":
                            d = con.getStatement().executeUpdate("UPDATE BowlerAverages "
                                    + "SET GamesPlayed='" + count2 + "', LeagueAverage='"
                                    + average2 + "' WHERE PlayerId = '" + playerId + "'");
                            break;
                        case "Tournament":
                            d = con.getStatement().executeUpdate("UPDATE BowlerAverages "
                                    + "SET GamesPlayed='" + count2 + "', TournamentAverage='"
                                    + average2 + "' WHERE PlayerId = '" + playerId + "'");
                            break;
                    }

                    // Select the averages from the BowlerAverages table
                    ResultSet rs2 = con.getStatement().executeQuery("SELECT PrivateAverage, "
                            + "LeagueAverage, TournamentAverage FROM BowlerAverages "
                            + "WHERE PlayerId = '" + playerId + "'");

                    int sumAll = 0;
                    int privateAverage = 0;
                    int leagueAverage = 0;
                    int tournamentAverage = 0;
                    // Add all the averages together
                    while (rs2.next()) {
                        privateAverage = Integer.parseInt(rs2.getString(1));
                        leagueAverage = Integer.parseInt(rs2.getString(2));
                        tournamentAverage = Integer.parseInt(rs2.getString(3));
                        sumAll += privateAverage;
                        sumAll += leagueAverage;
                        sumAll += tournamentAverage;
                    }
                    // Get the overall average
                    int averageAll = 0;
                    // Only add gametype average if there is an average for that game type
                    if (privateAverage > 0 && leagueAverage > 0 && tournamentAverage > 0) {
                        averageAll = sumAll / 3;
                    } else if (privateAverage > 0 && leagueAverage > 0) {
                        averageAll = sumAll / 2;
                    } else if (privateAverage > 0 && tournamentAverage > 0) {
                        averageAll = sumAll / 2;
                    } else if (leagueAverage > 0 && tournamentAverage > 0) {
                        averageAll = sumAll / 2;
                    } else {
                        averageAll = sumAll;
                    }
                    // Update the overall average of the BowlerAverages table
                    int c = con.getStatement().executeUpdate("UPDATE BowlerAverages "
                            + "SET [Overall Average]='" + averageAll + "' WHERE PlayerId = '"
                            + playerId + "'");
                    //------------------------------------------------------------------

                    JOptionPane.showMessageDialog(null, "Update successful");

                    // Create and display the Main form
                    new frm_DisplayScores(playerId).setVisible(true);
                    // Close database connection and dispose of this form
                    con.getConnection().close();
                    this.dispose();

                } else { // If the score entry fails then tell the user and reset text
                    JOptionPane.showMessageDialog(null, "Failed");
                    // Set the fields to the selected game information
                    txt_Name.setText(name);
                    DatePicker.setDate(date2);
                    cmb_UpdateGames_Type.setSelectedItem(type);
                    txt_Score.setText(score);
                }
            } else {
                if (updateScore < 0 || updateScore > 300) {
                    JOptionPane.showMessageDialog(null, "You must enter a number "
                            + "between 0 and 300 (inclusive).");
                }
                if (updateType == null) {
                    JOptionPane.showMessageDialog(null, "You must select a game type");
                }
                txt_Score.setText(score);
            }
        } catch (Exception e) {
            System.out.println("Error: " + e);
        }
    }//GEN-LAST:event_btn_UpdateGames_UpdateActionPerformed

    private void btn_UpdateGames_ClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_UpdateGames_ClearActionPerformed
        // Set the fields to the selected game information
        txt_Name.setText("");
        DatePicker.setDate(null);
        cmb_UpdateGames_Type.setSelectedItem(null);
        txt_Score.setText("");
    }//GEN-LAST:event_btn_UpdateGames_ClearActionPerformed

    private void btn_UpdateGames_DoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_UpdateGames_DoneActionPerformed
        new frm_DisplayScores(playerId).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btn_UpdateGames_DoneActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frm_UpdateGames.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frm_UpdateGames.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frm_UpdateGames.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frm_UpdateGames.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frm_UpdateGames(playerId, id, name, date, type, score).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jdesktop.swingx.JXDatePicker DatePicker;
    private javax.swing.JButton btn_UpdateGames_Clear;
    private javax.swing.JButton btn_UpdateGames_Done;
    private javax.swing.JButton btn_UpdateGames_Update;
    private javax.swing.JComboBox<String> cmb_UpdateGames_Type;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JLabel lbl_UpdateGames_Date;
    private javax.swing.JLabel lbl_UpdateGames_Name;
    private javax.swing.JLabel lbl_UpdateGames_Score;
    private javax.swing.JLabel lbl_UpdateGames_Type;
    private javax.swing.JMenuItem menu_About;
    private javax.swing.JMenu menu_Date;
    private javax.swing.JMenuItem menu_Delete;
    private javax.swing.JPopupMenu.Separator menu_File_Seperator1;
    private javax.swing.JMenuItem menu_Help_Howto;
    private javax.swing.JMenuItem menu_Leagues;
    private javax.swing.JMenuItem menu_Logout;
    private javax.swing.JMenuBar menu_Main;
    private javax.swing.JMenuItem menu_MainMenu_Player_scorecard;
    private javax.swing.JMenuItem menu_Menu_File_Exit;
    private javax.swing.JMenuItem menu_Menu_Player_EnterScores;
    private javax.swing.JMenuItem menu_Menu_Player_ViewScores;
    private javax.swing.JMenuItem menu_Tournamants;
    private javax.swing.JMenuItem menu_UpdateInfo;
    private javax.swing.JMenu menu_main_File;
    private javax.swing.JMenu menu_main_Help;
    private javax.swing.JTextField txt_Name;
    private javax.swing.JTextField txt_Score;
    // End of variables declaration//GEN-END:variables

    private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("radarlogoIcon.png")));
    }
}
