
import java.awt.Toolkit;
import java.io.File;
import java.sql.*;
import javax.swing.JOptionPane;
import java.awt.Desktop;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author robwo
 */
public class frm_DisplayScores extends javax.swing.JFrame {

    private static int playerId;
    private DBConnect con;
    private String date;
    private int row = 0;

    /**
     * Creates new form frm_DisplayScores and displays game information.
     *
     * @param playerId - the playerId used to get player information from the
     * database tables
     */
    public frm_DisplayScores(int playerId) {
        initComponents();
        setIcon();
        this.playerId = playerId;

        // Connect to database and display user's name game information
        try {
            // Connect to the database
            con = new DBConnect();
            // Select field from PlayerInfo table
            ResultSet rs = con.getStatement().executeQuery("SELECT * FROM "
                    + "PlayerInfo WHERE [PlayerId] = " + playerId);
            // Select fields from Games table
            ResultSet rs2 = con.getStatement().executeQuery("SELECT GameId, Gamename, "
                    + "Gametype, GameDate, TotalScore FROM Games WHERE "
                    + "PlayerId = '" + playerId + "'");
            // Select averages from BowlerAverages table
            ResultSet rs3 = con.getStatement().executeQuery("SELECT [Overall Average] "
                    + "FROM BowlerAverages WHERE PlayerId = '" + playerId + "'");

            // Display user's id and full name
            while (rs.next()) {
                lbl_Statistics_PlayerID.setText(rs.getString(1));
                lbl_Statistics_PlayerIDLBL.setText(rs.getString(2) + " " + rs.getString(3));
                this.setTitle(rs.getString(2) + " " + rs.getString(3) + " Statistics");
            }

            // Display game names, dates, and scores
            while (rs2.next()) {
                // Get the date and substring it to the remove the time
                date = rs2.getString(4);
                date = date.substring(0, 10);
                // Set the values of the cells to the corresponding column names
                tbl_Games.setValueAt(rs2.getString(1), row, 0);
                tbl_Games.setValueAt(date, row, 1);
                tbl_Games.setValueAt(rs2.getString(2), row, 2);
                tbl_Games.setValueAt(rs2.getString(5), row, 3);
                tbl_Games.setValueAt(rs2.getString(3), row, 4);
                row++;
            }

            // Display the bowler's average
            while (rs3.next()) {
                jLabel2.setText(rs3.getString(1));
            }
        } catch (Exception e) { // Print error if there is a problem with database
            System.out.println("Error: " + e);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbl_Games = new javax.swing.JTable();
        cmbo_GameTypes = new javax.swing.JComboBox<>();
        lbl_Statistics_Player = new javax.swing.JLabel();
        lbl_Statistics_PlayerID = new javax.swing.JLabel();
        lbl_Statistics_Name = new javax.swing.JLabel();
        lbl_Statistics_PlayerIDLBL = new javax.swing.JLabel();
        lbl_Statistics_Type = new javax.swing.JLabel();
        btn_Menu = new javax.swing.JButton();
        btn_Exit = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btn_Delete = new javax.swing.JButton();
        btn_UpdateGame = new javax.swing.JButton();
        menu_Main = new javax.swing.JMenuBar();
        menu_main_File = new javax.swing.JMenu();
        menu_File_Seperator1 = new javax.swing.JPopupMenu.Separator();
        jMenu3 = new javax.swing.JMenu();
        menu_UpdateInfo1 = new javax.swing.JMenuItem();
        menu_Delete1 = new javax.swing.JMenuItem();
        menu_Logout = new javax.swing.JMenuItem();
        menu_Menu_File_Exit = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        menu_MainMenu_Player_scorecard = new javax.swing.JMenuItem();
        menu_Menu_Player_EnterScores = new javax.swing.JMenuItem();
        menu_Tournamants = new javax.swing.JMenuItem();
        menu_Leagues = new javax.swing.JMenuItem();
        menu_UpdateInfo = new javax.swing.JMenuItem();
        menu_main_Help = new javax.swing.JMenu();
        menu_About = new javax.swing.JMenuItem();
        menu_Help_Howto = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        menu_Date = new javax.swing.JMenu();

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Player Statistics");
        setBackground(new java.awt.Color(0, 41, 60));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(0, 41, 60));

        tbl_Games.setBackground(new java.awt.Color(241, 243, 206));
        tbl_Games.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "GameID", "Date", "Name", "Score", "Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbl_Games.setSelectionBackground(new java.awt.Color(242, 133, 0));
        jScrollPane2.setViewportView(tbl_Games);

        cmbo_GameTypes.setBackground(new java.awt.Color(242, 133, 0));
        cmbo_GameTypes.setForeground(new java.awt.Color(241, 243, 206));
        cmbo_GameTypes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All Games", "Private", "Tournament", "League" }));
        cmbo_GameTypes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbo_GameTypesActionPerformed(evt);
            }
        });

        lbl_Statistics_Player.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        lbl_Statistics_Player.setForeground(new java.awt.Color(241, 243, 206));
        lbl_Statistics_Player.setText("Player ID");

        lbl_Statistics_PlayerID.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        lbl_Statistics_PlayerID.setForeground(new java.awt.Color(241, 243, 206));
        lbl_Statistics_PlayerID.setText("UserID");

        lbl_Statistics_Name.setBackground(new java.awt.Color(0, 41, 60));
        lbl_Statistics_Name.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        lbl_Statistics_Name.setForeground(new java.awt.Color(241, 243, 206));
        lbl_Statistics_Name.setText("Name");
        lbl_Statistics_Name.setToolTipText("");

        lbl_Statistics_PlayerIDLBL.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        lbl_Statistics_PlayerIDLBL.setForeground(new java.awt.Color(241, 243, 206));
        lbl_Statistics_PlayerIDLBL.setText("Player ID");

        lbl_Statistics_Type.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbl_Statistics_Type.setForeground(new java.awt.Color(241, 243, 206));
        lbl_Statistics_Type.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_Statistics_Type.setText("Type");

        btn_Menu.setBackground(new java.awt.Color(246, 42, 0));
        btn_Menu.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        btn_Menu.setForeground(new java.awt.Color(241, 243, 206));
        btn_Menu.setText("Main Menu");
        btn_Menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_MenuActionPerformed(evt);
            }
        });

        btn_Exit.setBackground(new java.awt.Color(246, 42, 0));
        btn_Exit.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        btn_Exit.setForeground(new java.awt.Color(241, 243, 206));
        btn_Exit.setText("Exit");
        btn_Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ExitActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(241, 243, 206));
        jLabel1.setText("Average");

        jLabel2.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(241, 243, 206));
        jLabel2.setText("Lbl_Average");

        btn_Delete.setBackground(new java.awt.Color(246, 42, 0));
        btn_Delete.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        btn_Delete.setForeground(new java.awt.Color(241, 243, 206));
        btn_Delete.setText("Delete Game");
        btn_Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_DeleteActionPerformed(evt);
            }
        });

        btn_UpdateGame.setBackground(new java.awt.Color(246, 42, 0));
        btn_UpdateGame.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        btn_UpdateGame.setForeground(new java.awt.Color(241, 243, 206));
        btn_UpdateGame.setText("Update Game");
        btn_UpdateGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_UpdateGameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(lbl_Statistics_Name, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lbl_Statistics_Player, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbl_Statistics_PlayerID, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbl_Statistics_PlayerIDLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cmbo_GameTypes, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbl_Statistics_Type, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(40, 40, 40))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btn_Menu, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                                .addComponent(btn_Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(69, 69, 69)
                                .addComponent(btn_UpdateGame, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(69, 69, 69)
                                .addComponent(btn_Exit, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_Statistics_Player)
                            .addComponent(lbl_Statistics_PlayerID))
                        .addGap(5, 5, 5))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lbl_Statistics_Type, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbo_GameTypes, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lbl_Statistics_Name)
                        .addComponent(lbl_Statistics_PlayerIDLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(btn_Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btn_UpdateGame, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_Menu, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_Exit, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        menu_Main.setBackground(new java.awt.Color(242, 133, 0));
        menu_Main.setForeground(new java.awt.Color(242, 133, 0));

        menu_main_File.setText("File");
        menu_main_File.setToolTipText("File");
        menu_main_File.add(menu_File_Seperator1);

        jMenu3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/settingssmall.png"))); // NOI18N
        jMenu3.setText("Administration");

        menu_UpdateInfo1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        menu_UpdateInfo1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bookmarksmall.png"))); // NOI18N
        menu_UpdateInfo1.setText("Player Infomation");
        menu_UpdateInfo1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_UpdateInfo1ActionPerformed(evt);
            }
        });
        jMenu3.add(menu_UpdateInfo1);

        menu_Delete1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        menu_Delete1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/trash, bin1.png"))); // NOI18N
        menu_Delete1.setText("Delete Account");
        menu_Delete1.setToolTipText("Under Cpntruction");
        menu_Delete1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_Delete1ActionPerformed(evt);
            }
        });
        jMenu3.add(menu_Delete1);

        menu_main_File.add(jMenu3);

        menu_Logout.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        menu_Logout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/warning1.png"))); // NOI18N
        menu_Logout.setText("Logout");
        menu_Logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_LogoutActionPerformed(evt);
            }
        });
        menu_main_File.add(menu_Logout);

        menu_Menu_File_Exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        menu_Menu_File_Exit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/powerlittle.png"))); // NOI18N
        menu_Menu_File_Exit.setText("Exit");
        menu_Menu_File_Exit.setToolTipText("Exit System");
        menu_Menu_File_Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_Menu_File_ExitActionPerformed(evt);
            }
        });
        menu_main_File.add(menu_Menu_File_Exit);

        menu_Main.add(menu_main_File);

        jMenu1.setText("Menu");

        menu_MainMenu_Player_scorecard.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        menu_MainMenu_Player_scorecard.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/app draw1.png"))); // NOI18N
        menu_MainMenu_Player_scorecard.setText("ScoreCard");
        menu_MainMenu_Player_scorecard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_MainMenu_Player_scorecardActionPerformed(evt);
            }
        });
        jMenu1.add(menu_MainMenu_Player_scorecard);

        menu_Menu_Player_EnterScores.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        menu_Menu_Player_EnterScores.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/foursquare1.png"))); // NOI18N
        menu_Menu_Player_EnterScores.setText("Enter Scores");
        menu_Menu_Player_EnterScores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_Menu_Player_EnterScoresActionPerformed(evt);
            }
        });
        jMenu1.add(menu_Menu_Player_EnterScores);

        menu_Tournamants.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        menu_Tournamants.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/eye in a sky1.png"))); // NOI18N
        menu_Tournamants.setText("Tournaments");
        menu_Tournamants.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_TournamantsActionPerformed(evt);
            }
        });
        jMenu1.add(menu_Tournamants);

        menu_Leagues.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        menu_Leagues.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/browser1.png"))); // NOI18N
        menu_Leagues.setText("Leagues");
        menu_Leagues.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_LeaguesActionPerformed(evt);
            }
        });
        jMenu1.add(menu_Leagues);

        menu_UpdateInfo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        menu_UpdateInfo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bookmarksmall.png"))); // NOI18N
        menu_UpdateInfo.setText("Player Infomation");
        menu_UpdateInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_UpdateInfoActionPerformed(evt);
            }
        });
        jMenu1.add(menu_UpdateInfo);

        menu_Main.add(jMenu1);

        menu_main_Help.setText("Help");

        menu_About.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        menu_About.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/radarlogoIcon.png"))); // NOI18N
        menu_About.setText("About");
        menu_About.setToolTipText("About");
        menu_About.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_AboutActionPerformed(evt);
            }
        });
        menu_main_Help.add(menu_About);

        menu_Help_Howto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/messages2small.png"))); // NOI18N
        menu_Help_Howto.setText("Help");
        menu_Help_Howto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_Help_HowtoActionPerformed(evt);
            }
        });
        menu_main_Help.add(menu_Help_Howto);

        menu_Main.add(menu_main_Help);
        menu_Main.add(jMenu2);

        menu_Date.setText("Date");
        menu_Main.add(menu_Date);

        setJMenuBar(menu_Main);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This method displays the game information of specific games based on the
     * game type specified with the GamesTypes combo box.
     *
     * @param evt
     */
    private void cmbo_GameTypesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbo_GameTypesActionPerformed
        // Fill the table with games
        showTable();
    }//GEN-LAST:event_cmbo_GameTypesActionPerformed

    /**
     * This method exits the program when the Exit button is clicked.
     *
     * @param evt
     */
    private void btn_ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btn_ExitActionPerformed

    /**
     * This method creates and displays the Main Form when the Main Menu button
     * is clicked.
     *
     * @param evt
     */
    private void btn_MenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_MenuActionPerformed
        new frm_Main(playerId).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btn_MenuActionPerformed

    private void menu_LogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_LogoutActionPerformed
        new frm_LoginPage().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_menu_LogoutActionPerformed

    private void menu_Menu_File_ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_Menu_File_ExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_menu_Menu_File_ExitActionPerformed

    private void menu_MainMenu_Player_scorecardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_MainMenu_Player_scorecardActionPerformed
        new frm_BowlingScoreCard(playerId).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_menu_MainMenu_Player_scorecardActionPerformed

    private void menu_Menu_Player_EnterScoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_Menu_Player_EnterScoresActionPerformed
        new frm_EnterBowlingScores(playerId).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_menu_Menu_Player_EnterScoresActionPerformed

    private void menu_TournamantsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_TournamantsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_menu_TournamantsActionPerformed

    private void menu_LeaguesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_LeaguesActionPerformed
        new frm_Leagues(playerId).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_menu_LeaguesActionPerformed

    private void menu_UpdateInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_UpdateInfoActionPerformed
        new frm_PlayerInfo(playerId).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_menu_UpdateInfoActionPerformed

    private void menu_AboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_AboutActionPerformed
        new frm_About().setVisible(true);
    }//GEN-LAST:event_menu_AboutActionPerformed

    private void menu_Help_HowtoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_Help_HowtoActionPerformed
        // TODO add your handling code here:
        try {
            //            String URL = "Howto/GameTrakker_HowTo.html";
            //            java.awt.Desktop.getDesktop().browse(java.net.URI.create(URL));

            Desktop.getDesktop().open(new File("Howto\\GameTrakker_HowTo.html"));

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }

    }//GEN-LAST:event_menu_Help_HowtoActionPerformed

    private void btn_DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_DeleteActionPerformed
        int selected = tbl_Games.getSelectedRow();
        String id = null;
        String type = null;
        // Get the game id
        if (selected != -1) {
            id = (String) tbl_Games.getValueAt(selected, 0);
            type = (String) tbl_Games.getValueAt(selected, 4);
        }

        try {
            if (id != null) {
                // Delete the selected game
                int z = con.getStatement().executeUpdate("DELETE FROM Games WHERE PlayerId "
                        + "= '" + playerId + "' AND GameId = '" + id + "'");
                if (z == 1) {
                    // INSERTING BOWLER AVERAGES ---------------------------------------
                    // Select the scores from the Games table
                    ResultSet rs = con.getStatement().executeQuery("SELECT TotalScore"
                            + " FROM Games WHERE PlayerId = '" + playerId + "' "
                            + "AND Gametype = '" + type + "'");

                    int count = 0;
                    int sum = 0;
                    // Add all the scores together
                    while (rs.next()) {
                        sum += Integer.parseInt(rs.getString(1));
                        count++;
                    }
                    if (count == 0) {
                        count = 1;
                    }

                    // Get the average of all the scores
                    int average = sum / count;
                    // Update the averages of the BowlerAverages table
                    int b = 0;
                    switch (type) {
                        case "Private":
                            b = con.getStatement().executeUpdate("UPDATE BowlerAverages "
                                    + "SET GamesPlayed='" + count + "', PrivateAverage='"
                                    + average + "' WHERE PlayerId = '" + playerId + "'");
                            break;
                        case "League":
                            b = con.getStatement().executeUpdate("UPDATE BowlerAverages "
                                    + "SET GamesPlayed='" + count + "', LeagueAverage='"
                                    + average + "' WHERE PlayerId = '" + playerId + "'");
                            break;
                        case "Tournament":
                            b = con.getStatement().executeUpdate("UPDATE BowlerAverages "
                                    + "SET GamesPlayed='" + count + "', TournamentAverage='"
                                    + average + "' WHERE PlayerId = '" + playerId + "'");
                            break;
                    }

                    // Select the averages from the BowlerAverages table
                    ResultSet rs2 = con.getStatement().executeQuery("SELECT PrivateAverage, "
                            + "LeagueAverage, TournamentAverage FROM BowlerAverages "
                            + "WHERE PlayerId = '" + playerId + "'");

                    int sumAll = 0;
                    int privateAverage = 0;
                    int leagueAverage = 0;
                    int tournamentAverage = 0;
                    // Add all the averages together
                    while (rs2.next()) {
                        privateAverage = Integer.parseInt(rs2.getString(1));
                        leagueAverage = Integer.parseInt(rs2.getString(2));
                        tournamentAverage = Integer.parseInt(rs2.getString(3));
                        sumAll += privateAverage;
                        sumAll += leagueAverage;
                        sumAll += tournamentAverage;
                    }
                    // Get the overall average
                    int averageAll = 0;
                    // Only add gametype average if there is an average for that game type
                    if (privateAverage > 0 && leagueAverage > 0 && tournamentAverage > 0) {
                        averageAll = sumAll / 3;
                    } else if (privateAverage > 0 && leagueAverage > 0) {
                        averageAll = sumAll / 2;
                    } else if (privateAverage > 0 && tournamentAverage > 0) {
                        averageAll = sumAll / 2;
                    } else if (leagueAverage > 0 && tournamentAverage > 0) {
                        averageAll = sumAll / 2;
                    } else {
                        averageAll = sumAll;
                    }
                    // Update the overall average of the BowlerAverages table
                    int c = con.getStatement().executeUpdate("UPDATE BowlerAverages "
                            + "SET [Overall Average]='" + averageAll + "' WHERE PlayerId = '"
                            + playerId + "'");
                    //------------------------------------------------------------------
                    
                    JOptionPane.showMessageDialog(null, "Game " + id + " has been deleted.");
                }

                // Fill the table with games
                showTable();
            }
        } catch (Exception e) { // Print error if there is a problem with database
            System.out.println("Error: " + e);
        }
    }//GEN-LAST:event_btn_DeleteActionPerformed

    private void btn_UpdateGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_UpdateGameActionPerformed
        int selected = tbl_Games.getSelectedRow();
        String id = "";
        String date2 = "";
        String name = "";
        String score = "";
        String type = "";

        if (selected != -1) {
            id = (String) tbl_Games.getValueAt(selected, 0);
            date2 = (String) tbl_Games.getValueAt(selected, 1);
            name = (String) tbl_Games.getValueAt(selected, 2);
            score = (String) tbl_Games.getValueAt(selected, 3);
            type = (String) tbl_Games.getValueAt(selected, 4);
        }

        if (id != null && !id.equals("")) {
            new frm_UpdateGames(playerId, id, name, date2, type, score).setVisible(true);
            this.dispose();
        } else {
            JOptionPane.showMessageDialog(null, "You must select a game in order to edit one.");
        }
    }//GEN-LAST:event_btn_UpdateGameActionPerformed

    private void menu_UpdateInfo1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_UpdateInfo1ActionPerformed
        new frm_PlayerInfo(playerId).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_menu_UpdateInfo1ActionPerformed

    private void menu_Delete1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_Delete1ActionPerformed
        int ask = JOptionPane.showConfirmDialog(null, "Do you want to delete your account?");
        // Ask again to make sure the user really wants to delete their account
        if (ask == JOptionPane.YES_OPTION) {
            int delete = JOptionPane.showConfirmDialog(null, "This will permanently"
                    + " delete your account and information!\nAre you sure you"
                    + " want to delete your account?");
            // Delete account if user answers "yes"
            if (delete == JOptionPane.YES_OPTION) {
                try {
                    // Database connection
                    DBConnect con = new DBConnect();
                    // Delete user's averages
                    int a = con.getStatement().executeUpdate("DELETE FROM BowlerAverages"
                            + " WHERE PlayerId = '" + playerId + "'");
                    // Delete user's games
                    int b = con.getStatement().executeUpdate("DELETE FROM Games"
                            + " WHERE PlayerId = '" + playerId + "'");
                    // Delete user's info
                    int c = con.getStatement().executeUpdate("DELETE FROM LoginInfo"
                            + " WHERE PlayerId = '" + playerId + "'");
                    // Delete user's login info
                    int d = con.getStatement().executeUpdate("DELETE FROM PlayerInfo"
                            + " WHERE PlayerId = '" + playerId + "'");

                    /* Tell user their account has been successfully deleted
                    and return them to the login page */
                    if (a == 1 && c == 1) {
                        new frm_LoginPage().setVisible(true);
                        this.dispose();
                        JOptionPane.showMessageDialog(null, "Your account has been"
                                + " deleted.");

                    }
                } catch (Exception ex) {
                    System.out.println("ERROR: " + ex);
                }
            }
        }
    }//GEN-LAST:event_menu_Delete1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frm_DisplayScores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frm_DisplayScores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frm_DisplayScores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frm_DisplayScores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frm_DisplayScores(playerId).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_Delete;
    private javax.swing.JButton btn_Exit;
    private javax.swing.JButton btn_Menu;
    private javax.swing.JButton btn_UpdateGame;
    private javax.swing.JComboBox<String> cmbo_GameTypes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbl_Statistics_Name;
    private javax.swing.JLabel lbl_Statistics_Player;
    private javax.swing.JLabel lbl_Statistics_PlayerID;
    private javax.swing.JLabel lbl_Statistics_PlayerIDLBL;
    private javax.swing.JLabel lbl_Statistics_Type;
    private javax.swing.JMenuItem menu_About;
    private javax.swing.JMenu menu_Date;
    private javax.swing.JMenuItem menu_Delete1;
    private javax.swing.JPopupMenu.Separator menu_File_Seperator1;
    private javax.swing.JMenuItem menu_Help_Howto;
    private javax.swing.JMenuItem menu_Leagues;
    private javax.swing.JMenuItem menu_Logout;
    private javax.swing.JMenuBar menu_Main;
    private javax.swing.JMenuItem menu_MainMenu_Player_scorecard;
    private javax.swing.JMenuItem menu_Menu_File_Exit;
    private javax.swing.JMenuItem menu_Menu_Player_EnterScores;
    private javax.swing.JMenuItem menu_Tournamants;
    private javax.swing.JMenuItem menu_UpdateInfo;
    private javax.swing.JMenuItem menu_UpdateInfo1;
    private javax.swing.JMenu menu_main_File;
    private javax.swing.JMenu menu_main_Help;
    private javax.swing.JTable tbl_Games;
    // End of variables declaration//GEN-END:variables

    private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("radarlogoIcon.png")));
    }

    private void showTable() {
        // Get the selected item
        String type = cmbo_GameTypes.getItemAt(cmbo_GameTypes.getSelectedIndex());
        // Clear the table
        for (int i = 0; i < tbl_Games.getRowCount(); i++) {
            tbl_Games.setValueAt("", i, 0);
            tbl_Games.setValueAt("", i, 1);
            tbl_Games.setValueAt("", i, 2);
            tbl_Games.setValueAt("", i, 3);
            tbl_Games.setValueAt("", i, 4);
        }
        row = 0;

        // Display the selected game information
        try {
            // Select fields from Games table
            ResultSet rs = con.getStatement().executeQuery("SELECT GameId, Gamename, "
                    + "Gametype, GameDate, TotalScore FROM Games WHERE "
                    + "PlayerId = '" + playerId + "' AND Gametype = '" + type
                    + "'");
            ResultSet rs2 = con.getStatement().executeQuery("SELECT [Overall Average] "
                    + "FROM BowlerAverages WHERE PlayerId = '" + playerId + "'");
            // Display all games and overall average if "All Games" is selected
            switch (type) {
                case "All Games":
                    rs = con.getStatement().executeQuery("SELECT GameId, Gamename, "
                            + "Gametype, GameDate, TotalScore FROM Games WHERE "
                            + "PlayerId = '" + playerId + "'");
                    rs2 = con.getStatement().executeQuery("SELECT [Overall Average] "
                            + "FROM BowlerAverages WHERE PlayerId = '" + playerId + "'");
                    break;
                case "Private":
                    // Display private average if "Private" is selected
                    rs2 = con.getStatement().executeQuery("SELECT PrivateAverage "
                            + "FROM BowlerAverages WHERE PlayerId = '" + playerId + "'");
                    break;
                case "Tournament":
                    // Display tournament average if "Tournament" is selected
                    rs2 = con.getStatement().executeQuery("SELECT TournamentAverage "
                            + "FROM BowlerAverages WHERE PlayerId = '" + playerId + "'");
                    break;
                case "League":
                    // Display league average if "League" is selected
                    rs2 = con.getStatement().executeQuery("SELECT LeagueAverage "
                            + "FROM BowlerAverages WHERE PlayerId = '" + playerId + "'");
                    break;
            }

            // Display game names, dates, and scores
            while (rs.next()) {
                // Get the date and substring it to the remove the time
                date = rs.getString(4);
                date = date.substring(0, 10);
                // Set the values of the cells to the corresponding column names
                tbl_Games.setValueAt(rs.getString(1), row, 0);
                tbl_Games.setValueAt(date, row, 1);
                tbl_Games.setValueAt(rs.getString(2), row, 2);
                tbl_Games.setValueAt(rs.getString(5), row, 3);
                tbl_Games.setValueAt(rs.getString(3), row, 4);
                row++;
            }
            // Display averages
            while (rs2.next()) {
                jLabel2.setText(rs2.getString(1));
            }
        } catch (Exception e) { // Print error if there is a problem with database
            System.out.println("Error: " + e);
        }
    }
}
